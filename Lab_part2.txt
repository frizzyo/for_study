import numpy as np
import numpy.random
import    filterpy.kalman import    filterpy.common import matplotlib.pyplot as plt import   numpy    as    np import numpy.random
from Simulator import simulateSensor, CovarianceQ

# Моделирование данных датчика
def simulateSensor(samplesCount, noiseSigma, dt):
   # Шум с нормальным распределением. мат. ожидание = 0, среднеквадратичное отклонение = noiseSigma
   noise = numpy.random.normal(loc = 0.0, scale = noiseSigma, size = samplesCount)

   trajectory = np.zeros((3, samplesCount))

   position = 0
   velocity = 1.0
   acceleration = 0.0

   for i in range(1, samplesCount):
       position = position + velocity * dt + (acceleration * dt ** 2) / 2.0
       velocity = velocity + acceleration * dt
       acceleration = acceleration

       trajectory[0][i] = position
       trajectory[1][i] = velocity
       trajectory[2][i] = acceleration

   measurement = trajectory[0] + noise

   return trajectory, measurement # Истинное значение и данные "датчика" с шумом


dt = 0.01
 
measurementSigma = 0.5 processNoiseVariance = 1e-4

# Функция наблюдения - аналог матрицы наблюдения
# Преобразует вектор состояния x в вектор измерений z



# Вектор состояния - угол наклона
# Вектор измерений - ускорение вдоль осей X и Y
def measurementFunction(x):
  g = 9.8
  measurement = np.zeros(2)
  measurement[0] = math.sin(x[0]) * g
  measurement[1] = math.cos(x[0]) * g
  return measurement



trajectory, measurement = simulateSensor(1000, measurementSigma)

# Для unscented kalman filter необходимо выбрать алгоритм выбора сигма-точек points = filterpy.kalman.JulierSigmaPoints(3, kappa=0)




# Ковариационная матрица ошибки модели
filter.Q = filterpy.common.Q_discrete_white_noise(dim=3, dt=dt, var=processNoiseVariance)

# Ковариационная матрица ошибки измерения - 1х1
filter.R = np.array([[measurementSigma*measurementSigma]])

# Начальное состояние.
filter.x = np.array([0.0, 0.0, 0.0])

# Ковариационная матрица для начального состояния filter.P = np.array([[10.0, 0.0, 0.0],
 	[0.0, 10.0, 0.0],
 	[0.0, 0.0, 10.0]])

filteredState = [] stateCovarianceHistory = []

for i in range(0, len(measurement)):
   z = [ measurement[i] ]
 

   filteredState.append(filter.x)
   stateCovarianceHistory.append(filter.P)
 
filteredState = np.array(filteredState) stateCovarianceHistory = np.array(stateCovarianceHistory)

plt.title("Unscented Kalman filter") plt.plot(measurement, label="Измерение", color="#99AAFF")
plt.plot(trajectory[0], label="Истинное значение", color="#FF6633") plt.plot(filteredState[:, 0], label="Оценка фильтра", color="#224411") plt.legend()
plt.show()
